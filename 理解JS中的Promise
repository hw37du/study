原生Promise是ES2015对JavaScript领域做出的最大改变之一。
它们消除了回调中的一些更实质性的问题，并允许我们编写更接近同步逻辑的异步代码

Promise具有简单的API，但有一定的学习曲线。
如果您以前从未接触过它们，那么它们在概念上可能是优点难以理解，但是通过这篇文章进行介绍并进行充分的练习，我相信您就对下面的几点理解的很清楚

1，阐明我们为什么要使用承诺，以及他们解决了什么问题；
2，从实现和使用的角度解释承诺。
3，使用Promise重新实现常见的回调模式

下面，分别从以下几点来阐述Promise
1，回调函数存在的问题
2，Promise和IOC
3，用Promise进行流程控制
4，介绍then, reject,  resolve

其实Promise的执行机制就是我们所说的非阻塞，异步的操作，相反，同步的慨念就是会阻塞线程的执行，直到操作完成
异步代码正好相反：它允许程序的其余部分在处理长时间运行的操作（例如I / O或网络操作）时执行。
这也称为非阻塞代码
同步代码的主要优点是易于阅读和解释：同步程序从上到下执行，第n行在第n + 1行之前结束；主要的缺点是同步代码的速度很慢，每次您的用户需要界面和服务器通信时，浏览器就会冻结一会儿，从而带来糟糕的用户体验

回调函数有以下两个严重的问题
1，IOC
2，处理复杂的错误


