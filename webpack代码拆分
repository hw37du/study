常用个的代码拆分有三种
1，入口起点
2，去重和分离chunk
3，动态导入

入口起点，就是在entry中添加多个入口，但是这种方式存在着隐患
1，如果入口 chunk 之间包含一些重复的模块，那些重复模块都会被引入到各个 bundle 中。
2，这种方法不够灵活，并且不能动态地将核心应用程序逻辑中的代码拆分出来

去重和分离chunk，这个方式就可以解决上述的缺点，其中引用的插件就是SplitChunksPlugin

动态导入
当涉及到动态代码拆分时，webpack 提供了两个类似的技术。
第一种，也是推荐选择的方式是，使用符合 ECMAScript 提案 的 import() 语法 来实现动态导入。
第二种，则是 webpack 的遗留功能，使用 webpack 特定的 require.ensure
注（
import() 调用会在内部用到 promises。
如果在旧版本浏览器中使用 import()，记得使用一个 polyfill 库（例如 es6-promise 或 promise-polyfill），来 shim Promise）
